<%# -*- coding: utf-8 %>
<%# 必要なライブラリの読み込み %>
<% require 'rubygems' %>
<% require 'dbi' %>

<%# データベース接続 %>
<% dbh = DBI.connect('DBI:SQLite3:research_log.db') %>

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
  <title>美馬研究室 研究記録</title>

  <!-- BootStrapの読み込み -->
  <link href="css/bootstrap.min.css" rel="stylesheet" type="text/css">

  <!-- TimePickerの読み込み -->
  <link href="timepicker-css/bootstrap-timepicker.min.css" rel="stylesheet" type="text/css">

  <!-- DateTimePickerの読み込み -->
  <link rel="stylesheet" type="text/css" href="jquery.datetimepicker.css"/ >

  <!-- Custom styles for this template -->
  <link href="sticky-footer.css" rel="stylesheet">

</head>
<body>

  <!-- ナビゲーション -->
  <nav class="navbar navbar-inverse" role="navigation">
    <div class="container">

        <!-- ナビゲーションヘッダー -->
        <div class="navbar-header">

          <!-- スマホサイズになった時のボタンの設定 -->
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand text-info" href="index.html">美馬研究室　研究記録</a>

        </div>

        <!-- ナビゲーションの内容 -->
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="index.html">ホーム</a></li>
            <li><a href="log.html">記録する</a></li>
            <li><a href="graph.html">勉強ログ</a></li>
          </ul>
        </div>

    </div>
  </nav>

    
  <!-- メインコンテンツ -->
  <!-- メインコンテンツ 記録フォーム -->
  <div class="container" style="padding: 20px 0">

    <!-- アクションはlog -->
    <form method="post" action="log">
      <div class="panel panel-default">
        <table class="table table-bordered">
          <thead>
            <tr><th><span id="date"></span>の勉強を記録する</th></tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <div class="form-group">


                  <!-- ユーザ名の選択 -->
                  <p style="margin: 15px 10px;">
                    <label for="user_select">作業者名</label>
                    <select style="width:40%; min-width:250px;"class="form-control" id="name_select" name="user_id">

<%# ユーザ名をデータベースから取り出す %>
<% sth_name = dbh.execute("select * from users;") %>

<% sth_name.each do |row_name| %>

                      <option value="<%= row_name["user_id"] %>"><%= "#{row_name["user_name"]}".force_encoding("utf-8") %></option>
                     
<% end %>

                    </select>
                  </p>


                   <!-- タスク名の入力 -->
                  <p style="margin: 15px 10px;" >
                    <label for="task_name">タスク名</label>
                    <input style="width:40%; min-width:250px;" type="text" class="form-control" name="task_name">
                  </p>


                  <!-- カテゴリーの選択 -->
                  <p style="margin: 15px 10px;" >
                    <label for="category_id">カテゴリー名</label>
                    <select style="width:40%; min-width:250px;" class="form-control" id="task_select" name="category_id">

<%# タスク名をデータベースから取り出す %>
<% sth_category = dbh.execute("select * from categories;") %>

<% sth_category.each do |row_category| %>

                      <option value="<%= row_category["category_id"] %>"><%= "#{row_category["category_name"].to_s}".force_encoding("utf-8") %></option>
                      
<% end %>

                    </select>
                  </p>

                  <!-- 学習環境の選択 -->
                  <p style="margin: 15px 10px;">
                    <label for="group_frag">学習環境</label>
                    <select style="width:40%; min-width:250px;"class="form-control"  name="group_frag">

                      <option value="0">個人での学習</option>
                      <option value="1">グループでの学習</option>

                    </select>
                  </p>

                
                  <!-- 作業時間の入力 -->
                  <p style="margin: 15px 10px;" > 
                    <label for="start_time">作業した時間を入力</label>
                    <div class="form-inline" style="margin:0px 0px 0px 10px;">
                      <label>開始時間</label>
                      <input id="datetimepicker_start" class="form-control" type="text" name="start_time" />
                      <label>から</label>
                      <input id="datetimepicker_finish" class="form-control" type="text" name="finish_time" />
                      <label>まで</label>
                    </div>
                  </p>

                    
                  <!-- コメントの入力 -->
                  <p style="margin: 15px 10px;" >  
                    <label for="comment">学習内容や感想など</label>
                    <textarea name="comment" class="form-control" row="2" placeholder="学習内容や感想" style="resize: none;"></textarea>
                    <p class="help-block" style="margin-left: 10px;">※できるだけ他の人もわかるように書きましょう。</p>
                  </p>
                    
                  <p style="margin: 15px 10px;">
                    <button type="submit" class="btn btn-success">記録する</button>
                  </p>

                </div>
                    
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </form>

      <!-- 記録のグラフ -->
      <form>
        <div class="panel panel-default">
          <table class="table table-bordered">
            <thead>
              <tr><th><span id="graph_date"></span>の勉強状況</th></tr>
            </thead>
            <tbody>
              <tr>
                <td>

                  <!-- みんなの学習時間グラフ -->
                  <p>
                    <h4><span class="label label-default">美馬研生の学習時間</span></h4><br>
                    <canvas id="chart1" style=" width: 100% !important; max-width: 500px; height: auto !important;">
                    </canvas>
                  </p>

                  <hr>

                  <!-- みんなの学習カテゴリグラフ -->
                  <p>
                    <h4><span class="label label-default">美馬研生の学習カテゴリ</span></h4><br>
                    <canvas id="chart2" style=" width: 100% !important; max-width: 500px; height: auto !important;">
                    </canvas>
                    <div id="pieLegend" ></div>
                  </p>

                  <hr>

                  <!-- みんなの学習スタイルグラフ -->
                  <p>
                    <h4><span class="label label-default">美馬研生の学習スタイル</span></h4><br>
                    <canvas id="chart3" style=" width: 100% !important; max-width: 500px; height: auto !important;">
                    </canvas>
                  </p>

              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </form>

    <!-- タイムライン表示機能 -->
    <div class="panel panel-default">
      <table class="table table-bordered">
        <thead>
          <tr><th>タイムライン</th></tr>
        </thead>
        <tbody>
          <tr>
            <td>

              <!-- コメントの表示 -->
              <ul class="media-list">
                <li class="media">
                  <!-- pull-right にすると、画像が右端に表示される -->
                  <a class="pull-left" href="#">
                    <img class="media-object" src="ichitomo.jpg" alt="写真" width="70" height="70" >
                  </a>
                  <div class="media-body">
                    <h4 class="media-heading">いちとも</h4>
                    今日は英語をたくさん勉強しました。
                  </div>
                </li>
                <hr>

                <li class="media">
                  <!-- pull-right にすると、画像が右端に表示される -->
                  <a class="pull-left" href="#">
                    <img class="media-object" src="boss.jpg" alt="写真" width="70" height="70" >
                  </a>
                  <div class="media-body">
                    <h4 class="media-heading">ボス</h4>
                    今日はプロジェクトに付き合わされました。
                  </div>
                </li>
                <hr>

                <li class="media">
                  <!-- pull-right にすると、画像が右端に表示される -->
                  <a class="pull-left" href="#">
                    <img class="media-object" src="sasaki.jpg" alt="写真" width="70" height="70" >
                  </a>
                  <div class="media-body">
                    <h4 class="media-heading">ささき</h4>
                    今日はプログラムをたくさん書きました。
                  </div>
                </li>
                <hr>

              </ul>

            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>



    

  <!-- footer -->
  <footer class="footer" style="height: 40px; background-color: #000000;">
    <div class="container" >
      <p class="text-muted" style="padding: 5px;">Copyright (C) 2015 Takuma Sasaki ALL Right Reserved.</p>
    </div>
  </footer>


  <!-- javascriptの読み込み -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script src="timepicker-js/bootstrap-timepicker.min.js"></script>
  <script src="jquery.datetimepicker.js"></script>
  <script src="http://momentjs.com/downloads/moment.js"></script>
  <script src="Chart.js"></script>
  <script>

  // 現在の日付を取得して表示する無名関数
  $(function (){

    // 現在の日付を取得して表示
    var m = moment();
    var date = m.format("YYYY年MM月DD日");

    // 現在の日付を表示
    $("#date").html(date);
    $("#graph_date").html(date);

  });
    

  $(function () {

    $('#datetimepicker_start').datetimepicker({
        format: 'Y-m-d H:i',
        lang: 'ja'
    });

    $('#datetimepicker_finish').datetimepicker({
        format: 'Y-m-d H:i',
        lang: 'ja'
    });

  });
      

     

      // 棒グラフを描画する処理
      var ctx1 = $("#chart1").get(0).getContext("2d");

      // 棒グラフのデータ
      var data1 = {
        // X軸のラベル
        labels : ["あおぽん","さとあや","まや","いちとも","たくま","こうしょう"],
        datasets : [
            {
              // グラフの描画設定
              fillColor : "#87CEFA",//面の色・透明度
              strokeColor : "#87CEFA",//線の色・透明度
              pointColor : "#00bfff", //点の色・透明度
              pointStrokeColor : "#fff",//点の周りの色
              data : [65,59,90,81,56,55]//labelごとのデータ
            }
          ]
      };

      // 棒グラフの設定
      var option1 = {

        // 値の開始値などを自分で設定するか
        scaleOverride : true,

        // y軸の値のステップ数
        scaleSteps : 3,

        // y軸のスッテプする大きさ
        scaleStepWidth : 60,

        // Y軸の値の始まりの値
        scaleStartValue : 0,

        // ラベルの表示 ( Y 軸の値 )
        scaleShowLabels : true,
        // ラベルの表示フォーマット ( Y 軸の値 )
        //scaleLabel : "",
        // X, Y 軸値のフォント
        scaleFontFamily : "'Arial'",
        // X, Y 軸値のフォントサイズ
        scaleFontSize : 12,
        // X, Y 軸値のフォントスタイル, normal, italic など
        scaleFontStyle : "italic",
        // X, Y 軸値の文字色
        scaleFontColor : "#666",    


        // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero : true,

        // Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines : true,

        // String - Colour of the grid lines
        scaleGridLineColor : "#c0c0c0",

        // Number - Width of the grid lines
        scaleGridLineWidth : 1,

        // Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,

        // Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,

        // Boolean - If there is a stroke on each bar
        barShowStroke : true,

        // Number - Pixel width of the bar stroke
        barStrokeWidth : 2,

        // Number - Spacing between each of the X value sets
        barValueSpacing : 5,

        // Number - Spacing between data sets within X values
        barDatasetSpacing : 1,

         // 表示の時のアニメーション
        animation : true,

        // アニメーションの速度 ( ステップ数 )
        animationSteps : 60,

        // アニメーションの種類, 以下が用意されている
        animationEasing : "easeOutBounce",

        // アニメーション終了後に実行する処理
        onAnimationComplete : null
        
      }

      // 棒グラフを描画する
      var myNewChart1 = new Chart(ctx1).Bar(data1,option1);

      // 円グラフを描画する処理
      var ctx2 = $("#chart2").get(0).getContext("2d");

      // 円グラフのデータ
      var data2 = [
            {
                value : 55,
                color : "#4169E1",
                fillColor : "#4169E1",
                label : "プログラミング"
            },
            {
                value : 15,
                color : "#FF3366",
                fillColor : "#FF3366",
                label : "英語",
            },
            {
                value : 15,
                color : "#339999",
                fillColor : "#339999",
                label : "授業"
            },
            {
                value : 15,
                color : "#FF9933",
                fillColor : "#FF9933",
                label : "情報技術者試験"
            }
        ];

      // 円グラフの設定
      var option2 = {

          // アニメーション有無
          animation : true

      };

      // 円グラフを描画する
      var myNewChart2 = new Chart(ctx2).Pie(data2,option2);
      $("#pieLegend").html(myNewChart2.generateLegend());


      // レーダーチャート描画する処理
      var ctx3 = $("#chart3").get(0).getContext("2d");

      // レーダーチャートのデータ
      var data3 = {
        labels: ["継続性", "勉強のバランス", "夜型", "天気が良いと勉強する", "一人で学習"],
        datasets: [
                  {
                    fillColor : "rgba(255, 0, 51, 0.5)",
                    strokeColor : "rgba(220, 220, 220, 1)",
                    pointColor : "rgba(220, 220, 220, 1)",
                    pointStrokeColor : "#fff",
                    data : [1, 59, 90, 81, 56]
                  },
                  {
                    fillColor : "rgba(0, 51, 255, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [28, 48, 40, 19, 96]
                　},
                  {
                    fillColor : "rgba(102, 255, 0, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [33, 30, 40, 89, 96]
                　},
                  {
                    fillColor : "rgba(255, 255, 102, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [28, 32, 40, 90, 96]
                　},
                  {
                    fillColor : "rgba(255, 51, 204, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [20, 48, 40, 32, 70]
                　},
                  {
                    fillColor : "rgba(255, 102, 0, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [55, 48, 90, 50, 96]
                　},
                  {
                    fillColor : "rgba(0, 153, 0, 0.5)",
                    strokeColor : "rgba(151, 187, 205, 1)",
                    pointColor : "rgba(151, 187, 205, 1)",
                    pointStrokeColor : "#fff",
                    data : [28, 48, 30, 80, 33]
                　}
        ]
      };


      

      // レーダーチャートの設定
      var option3 = {

            // 表示の時のアニメーション
            animation : true,
            // アニメーションの速度 ( ステップ数 )
            animationSteps : 60,

            animationEasing : "easeOutQuad",
            // アニメーション終了後に実行する処理
            // animation: false の時にも実行されるようです
            // e.g. onAnimationComplete : function() {alert('complete');}
            onAnimationComplete : null

      };

      // レーダーチャートを描画する
      var myNewChart3 = new Chart(ctx3).Radar(data3,option3);

  </script>
</body>
</html>

<%# 実行結果を開放する %>
<% sth_name.finish %>
<% sth_category.finish %>


<%# データベースとの接続を終了する %>
<% dbh.disconnect %>
